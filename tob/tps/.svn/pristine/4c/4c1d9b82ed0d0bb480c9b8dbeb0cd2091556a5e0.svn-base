package allumettes;

import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Défini les propriétés de base de la stratégie "humain".
 * d'un joueur du jeu des allumettes
 * @author  Julien Blanchon
 * @version 1.0
 */
public class Humain implements Strategie {

    private static String regex_entier_naturelle = "[+-]?[0-9]+";
    public static final String nom = "humain";
    private static final Scanner scanner = new Scanner(System.in);

    /** Obtenir le nom de la stratégie : humain.
     * @return nom de la stratégie
     */
    @Override
    public String getNom() {
        return nom;
    }

    /** Obtenir le choix de la stratégie humain: Choix humain (System.in).
     * @return nombre d'allumettes à prendre.
     * @throws ConfigurationException si il y a un problème de configuration
     * @throws CoupInvalideException si le coup est invalide (OperationInterditeException).
     */
    @Override
    public int getPrise(Jeu jeu, String nom) throws ConfigurationException, CoupInvalideException {
        boolean fin = false;
        String saisie;
        do {
            System.out.print(nom + ", combien d'allumettes ? ");
            saisie = this.getSaisie(nom);
            switch (saisie.toLowerCase()) {
                case "triche": this.tricher(jeu);
                    break;
                default:
                    if (this.isNaturelle(saisie)) {
                        fin = true;
                    } else {
                        System.out.println("Vous devez donner un entier.");
                    }
            }
        } while (!fin);
        int prise = this.convertirEntier(saisie);
        return prise;
    }

    private void tricher(Jeu jeu) throws CoupInvalideException {
        System.out.println("[Je triche...]");
        jeu.retirer(1);
        System.out.println("[Une allumette en moins, plus que " +
                jeu.getNombreAllumettes() +
                ". Chut !");
    }


    /** Obtenir la saisie String de l'humain
     * @see Scanner
     * @see System#in
     * @return la saisie clavier
     */
    private String getSaisie(String nom){
        String saisie;
        if (scanner.hasNextLine()) {
            saisie = scanner.nextLine();
        } else {
            throw new ConfigurationException("Pas de nouvelle entrée pour " + nom);
        }
        return saisie;
    }


    /** Est ce que la saisie est un entier naturelle.
     * @return si la saisie est un entier naturelle.
     */
    private boolean isNaturelle(String saisie){
        return saisie.matches(this.regex_entier_naturelle);
    }

    /** Convertir la saisie en entier.
     * @see Integer#parseInt(String)
     * @return le nombre d'allumette a prendre
     * @throws ConfigurationException si saisie n'est pas
     * convertible en prise
     */
    private int convertirEntier(String saisie) throws ConfigurationException{
        int prise;
        try {
            prise = Integer.parseInt(saisie);
        } catch (NumberFormatException e){
            prise  = 0;
            throw new ConfigurationException("C'est étrange " +
                    saisie +
                    " ne peut pas être convertie en entier...");
        }
        return prise;
    }

}
